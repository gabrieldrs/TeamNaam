extends ../doubleSidebarLayout
    
//- Hacky attempt at Namespacing CSS
block pageStyle
  - var pageStyleVar = "pageStyle-crossFilter "
  

  
block content
  h1.title=title
  style.
    .pageStyle-crossFilter .chart_box{padding-bottom:0px;}
    
    .dc-chart g.row text {
      fill: rgb(43, 43, 43);
     }
  
  .chart_box(style="margin-bottom:15px;min-height:65px;")
    h4.data-count.number-chart Loading Graph, Please Wait...
  
  #charts
  div(style='clear:both;').dc-chart.chart_box
    table#dc-trio-table.table.table-hover.table-bordered.table-striped
      thead
        tr.header
          th Junior
          th Senior
          th Mentor
          th: a(href='/MoreData' ): input.btn-info.btn-sm(type='button', value='Trio Details')
          
  div(style='clear:both;').dc-chart.chart_box
    table#dc-data-table.table.table-hover.table-bordered.table-striped
      thead
        tr.header
          th Name
          th Role
          th Identifier
          th Availability
              
  script.
    //# dc.js Getting Started and How-To Guide
    

    //~~~ Load data  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        //d3.csv("data.csv", function(data) {...};
        //d3.json("data.json", function(data) {...};
        //jQuery.getJson("data.json", function(data){...});

    window.onresize= function(){dc.renderAll();}
    
    d3.json("/data/applications/#{cohort._id.toString()}", function (res) {
        /* since its a csv file we need to format the data a bit */
        
        var dateFormat = d3.time.format("%m/%d/%Y");
        var numberFormat = d3.format(".2f");
        var days= ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
        
        var dataDateStart= new Date( res.data[0].submissionDate);
        var dataDateEnd  = new Date( res.data[res.data.length-1].submissionDate);
        
        var ndx = crossfilter(res.data);
        var all = ndx.groupAll();
        
        var charts={};
        console.log(res);
        // Used to instantiate the chart's html, js, and data dimensions.
        
        
        addMandatoryField(ndx,'accepted');
        addMandatoryField(ndx,'student');
        addMandatoryField(ndx,'senior');  
        
        addTable(ndx);
               
        // EXTRA FIELDS HERE
        (res.form || []).forEach(function (field) {         
           if (field.analyze)
            switch ( field.type) {
              case "number":                             
                makeChartHTML(field);
                var dim = ndx.dimension(function (d) {
                  return d[field.name];
                });
                var chart = dc.rowChart("#"+field.name+'-chart');
                
                chart.width(function (){ return $("#gender-chart").width();})
                  .height(function (){ return window.innerHeight*.4 < 160 ? window.innerHeight*0.4 : 160;})
                  .transitionDuration(350)
                  .margins({top: 5, right: 10, bottom: 37, left: 5})
                  .dimension( dim )
                  .group( dim.group() )
                  // assign colors to each value in the x scale domain
                  .ordinalColors(['#1f77b4']) 
                  .label(function (d) {
                      return d.key || 0;
                  })
                  // title sets the row text
                  .title(function (d) {
                      return d.key + ' description';
                  })            
                  .elasticX(true);
                        
                break;
              case "range":
                makeChartHTML(field);
                var dim = ndx.dimension(function (d) {
                  return d[field.name];
                });
                var chart = dc.rowChart("#"+field.name+'-chart');
                
                chart.width(function (){ return $("#gender-chart").width();})
                  .height(function (){ return window.innerHeight*.4 < 160 ? window.innerHeight*0.4 : 160;})
                  .transitionDuration(350)
                  .margins({top: 5, right: 10, bottom: 37, left: 5})
                  .dimension( dim )
                  .group( dim.group() )
                  // assign colors to each value in the x scale domain
                  .ordinalColors(['#1f77b4']) 
                  .label(function (d) {
                      return d.key;
                  })
                  // title sets the row text
                  .title(function (d) {
                      return d.key + ' description';
                  })            
                  .elasticX(true); 
                break;
              case "date":
                if (field.name == 'age' ){
                  makeChartHTML(field);
                  var dim = ndx.dimension(function (d) { 
                    return (new Date()).getFullYear()  -  (new Date(d[field.name])).getFullYear();
                  });
                  var chart = dc.rowChart("#"+field.name+'-chart');
                  
                  chart.width(function (){ return $("#gender-chart").width();})
                    .height(function (){ return window.innerHeight*.4 < 160 ? window.innerHeight*0.4 : 160;})
                    .transitionDuration(350)
                    .margins({top: 5, right: 10, bottom: 37, left: 5})
                    .dimension( dim )
                    .group( dim.group() )
                    // assign colors to each value in the x scale domain
                    .ordinalColors(['#1f77b4']) 
                    .label(function (d) {
                        var date= new Date(d.key);
                        var now= new Date();
                        return now.getFullYear() - date.getFullYear() -1 ;
                    })
                    // title sets the row text
                    .title(function (d) {
                        return d.key + ' description';
                    })            
                    .elasticX(true);  
                  }
                else {
                  makeChartHTML(field);
                  var dim = ndx.dimension(function (d) { 
                    return d[field.name];
                  });
                  var chart = dc.rowChart("#"+field.name+'-chart');
                  
                  chart.width(function (){ return $("#gender-chart").width();})
                    .height(function (){ return window.innerHeight*.4 < 160 ? window.innerHeight*0.4 : 160;})
                    .transitionDuration(350)
                    .margins({top: 5, right: 10, bottom: 37, left: 5})
                    .dimension( dim )
                    .group( dim.group() )
                    // assign colors to each value in the x scale domain
                    .ordinalColors(['#1f77b4']) 
                    .label(function (d) {
                        return d.key;
                    })
                    // title sets the row text
                    .title(function (d) {
                        return d.key + ' description';
                    })            
                    .elasticX(true);  
                }
                break;
              case "radioGroup":
                makeChartHTML(field);
                var dim = ndx.dimension(function (d) { 
                  return (typeof d[field.name] !== 'undefined')? d[field.name] : 'N/A';
                });
                var chart = dc.rowChart("#"+field.name+'-chart');
                
                chart.width(function (){ return $("#gender-chart").width();})
                  .height(function (){ return window.innerHeight*.4 < 160 ? window.innerHeight*0.4 : 160;})
                  .transitionDuration(350)
                  .margins({top: 5, right: 10, bottom: 37, left: 5})
                  .dimension( dim )
                  .group( dim.group() )
                  // assign colors to each value in the x scale domain
                  .ordinalColors(['#1f77b4']) 
                  .label(function (d) {
                      return d.key;
                  })
                  // title sets the row text
                  .title(function (d) {
                      return d.key + ' description';
                  })            
                  .elasticX(true);
                      break;
              case "checkboxGroup":
                var reduceAdd = function(p, v) {
                  if ( typeof v[field.name] === 'undefined' || v[field.name].length === 0 || v[field.name][0] === "") return p;    // skip empty values
                  if( typeof v[field.name] === 'string')
                    p[field.name] = (p[field.name] || 0) + 1;
                  else 
                    v[field.name].forEach(function(val, idx) {
                       p[val] = (p[val] || 0) + 1; //increment counts
                    });
                  return p;
                }

                function reduceRemove(p, v) {
                  if ( typeof v[field.name] === 'undefined' || v[field.name].length === 0 || v[field.name][0] === "") return p;    // skip empty values
                  if( typeof v[field.name] === 'string')
                    p[field.name] = (p[field.name] || 0) - 1;
                  else
                    v[field.name].forEach (function(val, idx) {
                       p[val] = (p[val] || 0) - 1; //decrement counts
                    });
                  return p;                  
                }

                function reduceInitial() {
                  return {};  
                }
                makeChartHTML(field);
                var dim = ndx.dimension(function (d) { 
                  return d[field.name];
                });
                var chart = dc.rowChart("#"+field.name+'-chart');
                var group = dim.groupAll().reduce(reduceAdd, reduceRemove, reduceInitial).value();
                group.all = function() {
                var newObject = [];
                for (var key in this) {
                  if (this.hasOwnProperty(key) && key != "all" && key != "top") {
                    newObject.push({
                      key: key,
                      value: this[key]
                    });
                  }
                }
                return newObject;
              };
                
                chart.width(function (){ return $("#gender-chart").width();})
                  .height(function (){ return window.innerHeight*.4 < 160 ? window.innerHeight*0.4 : 160;})
                  .transitionDuration(350)
                  .margins({top: 5, right: 10, bottom: 37, left: 5})
                  .dimension( dim )
                  .group( group )
                  // assign colors to each value in the x scale domain
                  .ordinalColors(['#1f77b4']) 
                  .label(function (d) {
                      return d.key;
                  })
                  // title sets the row text
                  .title(function (d) {
                      return d.key + ' description';
                  })            
                  .elasticX(true);        
                break;
            }          
        });
    
        //~~~ Create Crossfilter Dimensions and Groups  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
        //See the [crossfilter API](https://github.com/square/crossfilter/wiki/API-Reference) for reference.

        
        
        //~~~~ Charting   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              
        dc.dataCount(".data-count")
          .dimension(ndx)
          .group(all)
          .html({
        some:"<strong>%filter-count</strong> out of <strong> %total-count</strong> applicants selected | <a href='javascript:dc.filterAll(); dc.renderAll();''>Reset All Filters</a>",
        all:"All <strong>%total-count</strong> applicants selected. Please click on any graph to start filtering.",
        none: "<strong>Zero Matching applicants.</strong>  | <a href='javascript:dc.filterAll(); dc.renderAll();''>Reset All Filters</a> "
      });
          
        //~~~~ Rendering  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        dc.renderAll();
    
    
      function makeChartHTML(f){
        var el ='<div class="oneThird">'+
                  '<div id="'+ f.name +'-chart" class="dc-chart chart_box">'+
                    '<h4>'+ f.label +'</h4>'+
                    '<span style="display: none;" class="reset"></span>'+
                    '<a href="javascript:'+ f.name +'.filterAll();dc.redrawAll();" class="reset"></a>'+
                  '</div>'+
                '</div>';
        
        $('#charts').append($(el));
      }
      function addMandatoryField(ndx,name){
        makeChartHTML({name: name, label: name});
        var dim = ndx.dimension(function (d) {
          return d[name];
        });
        var chart = dc.rowChart("#"+name+'-chart');
        
        chart.width(function (){ return $("#gender-chart").width();})
          .height(function (){ return window.innerHeight*.4 < 160 ? window.innerHeight*0.4 : 160;})
          .transitionDuration(350)
          .margins({top: 5, right: 10, bottom: 37, left: 5})
          .dimension( dim )
          .group( dim.group() )
          // assign colors to each value in the x scale domain
          .ordinalColors(['#1f77b4']) 
          .label(function (d) {
              return ( typeof d.key !== 'undefined')? d.key : 'undefined';
          })
          // title sets the row text
          .title(function (d) {
              return d.key + ' description';
          })            
          .elasticX(true);
      }
      
      function addTable(ndx){
      
        var dim = ndx.dimension(function (d) {
          return d.age;
        });
        /*
        dc.dataTable('#data-table')
          .width(function (){ return $("#gender-chart").width();})
          .height(function (){ return window.innerHeight*.4 < 160 ? window.innerHeight*0.4 : 160;})
          .transitionDuration(350)
          .dimension( dim )
          .group( dim.group() )
          .size(10) // (optional) max number of records to be shown, :default = 25
          .columns([
              'gender'
          ])
          .renderlet(function (table) {
              table.selectAll('#data-table').classed('info', true);
          });
        */
        
        var datatable   = dc.dataTable("#dc-data-table");
        datatable
            .dimension(dim)
            .group(function(d) { return '<b>  Applicants:</b>'})
            
            .columns([
              function(d) {return d.fName +' '+d.lName;},
              function(d) {return (!d.student)? 'Mentor':
                      (d.senior) ? 'Senior':
                            'Junior';
              },
              function(d) {return d.studentNo || d.phoneNumber.replace(/(\d{3})(\d{3})(\d{4})/, "$1-$2-$3");;},
              function(d) {return d.availability;},
              function(d) {return '<a href="#MoreDataModal"><input type="button" value="Details" class="btn-info btn-sm"/></a>'}
            ])
            .size(500);     
      }
    });
    

