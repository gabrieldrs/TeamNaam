extends ../sidebarLayout

//- Hacky attempt at Namespacing CSS
block pageStyle
  - var pageStyleVar = "pageStyle-crossFilter "



block content

  h1.title=title

  .full
      .chart_box
        table#example.table.table-striped.table-bordered(cellspacing='0', width='100%')
          thead
            tr
              th Delete
              th Name
              th Age
              th Company
              th Submission Date
              th Comment
              th Status
              th Update
          tfoot
            tr
              th Delete
              th Name
              th Age
              th Company
              th Submission Date
              th Comment
              th Status
              th Update
          tbody

            for data in mentorApp
              tr(id='aid-'+(data._id || '').toString())
                  td: input.deleteApplication.btn-danger.btn-sm(data-aid=(data._id || '').toString(), type='button', value='Delete')
                  td=data.name
                  td=data.age
                  td=data.company
                  td=data.submissionMoment
                  td: input.form-control.input-sm.comment(data-aid=(data._id || '').toString(), value=data.adminComment)
                  td.acceptedSwitch: input.acceptedSwitch( data-aid=(data._id || '').toString(), checked=data.accepted || false, type="checkbox", data-size='small', data-toggle="toggle",  data-handle-width="100", data-on-text="Accepted", data-off-text="Pending", data-on-color="default", data-off-color="danger")
                  td: a(href='/form/update/mentor/'+(cohort._id || '').toString()+'/'+(cohort.secret || '').toString()+'/'+(data._id || '').toString() ): input.btn-default.btn-sm(type='button', value='Revise')

    script.
    $(document).ready(function() {
      $('input[type="checkbox"]').bootstrapSwitch();
      $('#example').dataTable();

      $('.deleteApplication').on('click',function(){
          var aid=this.getAttribute('data-aid');
          console.log('aid:',aid);
          $.post('/form/delete',{aid:aid, _csrf: '#{_csrf}'} )
          .done(function(data) {
              console.log('deleted:','tr#aid-'+aid);
              $('tr#aid-'+aid).remove();
          })
          .fail(function(data) {
              alert('Deletion of application failed');
              $('tr#aid-'+aid).css('border-color','red');
          });
      });

      $('.comment').on('blur', function() {

          var aid=this.getAttribute('data-aid');
          var msg=$(this).val();
          console.log(aid,msg);

          $.get('/staging/set_comment/'+aid+'/ '+msg+'/' )
          .done(function(data) {
              $('tr#aid-'+aid+' input.comment').css('border-color','green');
          })
          .fail(function(data) {
              $('tr#aid-'+aid+' input.comment').css('border-color','red');
          });
      });

      $('.acceptedSwitch').on('switchChange.bootstrapSwitch', function(event, state) {

          var aid=this.getAttribute('data-aid');
          console.log(aid,state);

          $.get('/staging/set_status/'+aid+'/'+state+'/' )
          .done(function(data) {
              $('tr#aid-'+aid+' td.acceptedSwitch > div').css('border-color','green');
          })
          .fail(function(data) {
              $('tr#aid-'+aid+' td.acceptedSwitch > div').css('border-color','red');
          })
          .done(function(data) {
              $('input.acceptedSwitch[data-aid="'+aid+'"]').bootstrapSwitch('state', data.state, true);
          });
      });

      $('.seniorSwitch').on('switchChange.bootstrapSwitch', function(event, state) {

          var aid=this.getAttribute('data-aid');
          console.log(this.getAttribute('data-aid'),state);

          $.get('/staging/set_tier/'+aid+'/'+state+'/')
          .done(function(data) {
              $('tr#aid-'+aid+' td.seniorSwitch > div').css('border-color','green');
          })
          .fail(function(data) {
              $('tr#aid-'+aid+' td.seniorSwitch > div').css('border-color','red');
          })
          .done(function(data) {
              $('input.seniorSwitch[data-aid="'+aid+'"]').bootstrapSwitch('state', data.state, true);
          });
      });

    });
    //# dc.js Getting Started and How-To Guide
    'use strict';

    /* jshint globalstrict: true */
    /* global dc,d3,crossfilter,colorbrewer */

    // ~~~ Create Chart Objects
    // Create chart objects assocated with the container elements identified by the css selector.
    // Note: It is often a good idea to have these objects accessible at the global scope so that they can be modified or filtered by other page controls.

    var frequencyChart = dc.barChart("#frequency-chart");
    var durationChart = dc.barChart("#duration-chart");
    var loyaltyChart = dc.barChart("#loyalty-chart");
    var dayOfWeekChart = dc.rowChart("#day-of-week-chart");
    var arrivalHourChart = dc.barChart("#arrival-hour-chart");
    var departureHourChart = dc.barChart("#departure-hour-chart");

    var moveChart = dc.lineChart("#weekly-move-chart");
    var volumeChart = dc.barChart("#weekly-volume-chart");
    var originChart = dc.barChart("#origin-chart");


    // ~~~ Anchor Div for Charts
    /*
    // A div anchor that can be identified by id
        <div id="your-chart"></div>
    // Title or anything you want to add above the chart
        <div id="chart"><span>Days by Gain or Loss</span></div>
    // ~~~~~ .turnOnControls()
    // If a link with css class "reset" is present then the chart
    // will automatically turn it on/off based on whether there is filter
    // set on this chart (slice selection for pie chart and brush
    // selection for bar chart). Enable this with `chart.turnOnControls(true)`
         <div id="chart">
           <a class="reset" href="javascript:myChart.filterAll();dc.redrawAll();" style="display: none;">reset</a>
         </div>
    // dc.js will also automatically inject applied current filter value into
    // any html element with css class set to "filter"
        <div id="chart">
            <span class="reset" style="display: none;">Current filter: <span class="filter"></span></span>
        </div>
    */


    //~~~ Load your data  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    //Data can be loaded through regular means with your
    //favorite javascript library
    //
    // ---javascript
    //d3.csv("data.csv", function(data) {...};
    //d3.json("data.json", function(data) {...};
    //jQuery.getJson("data.json", function(data){...});
    // ---
    var stuff;
    window.onresize= function(){dc.renderAll();}

    d3.json("/tmpdata.txt", function (data) {
        /* since its a csv file we need to format the data a bit */

        var dateFormat = d3.time.format("%m/%d/%Y");
        var numberFormat = d3.format(".2f");
        var days= ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];

        var dataDateStart= new Date( data[0].start );
        var dataDateEnd  = new Date( data.slice(-1)[0].end);

        data.forEach(function (d) {

          d.start = new Date(d.start);
          d.end = new Date(d.end);


          d.startHour = d.start.getHours();
          d.startDay = d3.time.day(d.start);

          d.endHour = d.end.getHours();

          d.startWeek = d3.time.week(d.start);
          d.startWeekDay = d.start.getDay()+"."+days[d.start.getDay()];

          d.duration = Math.round(d.duration/60/10); // DURATION in mins, with a dirty hack for 5 min resolution.  Value scaled down, then up again later on.

          d.frequency = Math.round(d.frequency/86400);  // CHANGE TO DAYS

          d.origin = new Date(d.origin);
          d.originDate = d3.time.day(d.origin);
          d.originWeek = d3.time.week(d.origin);
          // d.relStart  // IMPLEMENT A CHART
        });

        //~~~ Create Crossfilter Dimensions and Groups  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        //See the [crossfilter API](https://github.com/square/crossfilter/wiki/API-Reference) for reference.
        var ndx = crossfilter(data);


        // determine a histogram of visit frequency
        var freqDim = ndx.dimension(function (d) {
            return d.frequency;
        });
        var freqGroup = freqDim.group();

        // determine a histogram of duration
        var durationDim = ndx.dimension(function (d) {
            return d.duration;
        });
        var durationGroup = durationDim.group();

        // determine a histogram of loyalty
        var loyaltyDim = ndx.dimension(function (d) {
            return d.loyalty;
        });

        var loyaltyGroup = loyaltyDim.group();

        // counts per weekday
        var dayOfWeekDim = ndx.dimension(function (d) {
            return d.startWeekDay;
         });
        var dayOfWeekGroup = dayOfWeekDim.group();

        // counts per hour
        var hourOfDayDim = ndx.dimension(function (d) {
            return d.startHour;
         });
        var hourOfDayGroup = hourOfDayDim.group();

        // counts per hour
        var departureHourDim = ndx.dimension(function (d) {
            return d.endHour;
         });
        var departureHourGroup = departureHourDim.group();


        // dimension by day
        var moveDaysDim = ndx.dimension(function (d) {
            return d.startDay;
        });

        // group by total volume within move, and scale down result
        var volumeByDayGroup = moveDaysDim.group().reduceSum(function (d) {
            return 1;
        });

        // dimension by week
        var moveWeeksDim = ndx.dimension(function (d) {
            return d.startWeek;
        });

        var indexAvgByWeekGroup = moveWeeksDim.group().reduce(
            function (p, v) {
          if ( v.loyalty == 1 ) p.newClients++;
          else p.returnClients++;
              return p;
            },
            function (p, v) {
          if ( v.loyalty == 1 ) p.newClients--;
          else p.returnClients--;
              return p;
            },
            function () {
                return {newClients: 0, returnClients: 0};
            }
        );

        // dimension by Origin Week
        var originDim = ndx.dimension(function (d) {
            return d.originDate;
        });

        // group by origin, and scale down result
        var originGroup = originDim.group().reduceSum(function (d) {
            return 1;
        });

        var all = ndx.groupAll();


        //~~~~ Charting   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

          dc.dataCount(".data-count")
              .dimension(ndx)
              .group(all)
              .html({
            some:"<strong>%filter-count</strong> out of <strong> %total-count</strong> groups selected | <a href='javascript:dc.filterAll(); dc.renderAll();''>Reset All Filters</a>",
            all:"All <strong>%total-count</strong> groups selected. Please click on any graph to get started.",
            none: "<strong>Zero Matching groups.</strong>  | <a href='javascript:dc.filterAll(); dc.renderAll();''>Reset All Filters</a> "
          });

          frequencyChart.width(function (){ return $("#duration-chart").width();})
            .height(function (){ return window.innerHeight*.7 < 260 ? window.innerHeight*0.7 : 260;})
            .transitionDuration(350)
            .margins({top: 5, right: 10, bottom: 37, left: 38})
            .dimension(freqDim)
            .group(freqGroup)
            .elasticY(true)
            // (optional) whether bar should be center to its x value. Not needed for ordinal chart, :default=false
            .centerBar(false)
            // (optional) set gap between bars manually in px, :default=2
            .gap(1)
            // (optional) set filter brush rounding
            .round(dc.round.floor)
            ////.alwaysUseRounding(true)
            .xAxisLabel('Days Since')
            .yAxisLabel('Customer Count')
            .x(d3.scale.linear().domain([1, 35]))
            .renderHorizontalGridLines(true);

          durationChart.width(function (){ return $("#duration-chart").width();})
            .height(function (){ return window.innerHeight*.7 < 260 ? window.innerHeight*0.7 : 260;})
            .transitionDuration(350)
            .margins({top: 5, right: 10, bottom: 37, left: 38})
            .dimension(durationDim)
            .group(durationGroup)
            .elasticY(true)
            // (optional) whether bar should be center to its x value. Not needed for ordinal chart, :default=false
            .centerBar(false)
            // (optional) set gap between bars manually in px, :default=2
            .gap(1)
            // (optional) set filter brush rounding
            .round(dc.round.floor)
            ////.alwaysUseRounding(true)
            .xAxisLabel('Minutes')
            .yAxisLabel('Customer Count')
            .x( d3.scale.linear().domain([1,25]) )
            .renderHorizontalGridLines(true);
            durationChart.xAxis().tickFormat(function(v) {return v*10;})     // DIRTY HACK FOR BINNING

          loyaltyChart.width(function (){ return $("#duration-chart").width();})
            .height(function (){ return window.innerHeight*.7 < 260 ? window.innerHeight*0.7 : 260;})
            .transitionDuration(350)
            .margins({top: 5, right: 10, bottom: 37, left: 45})
            .dimension(loyaltyDim)
            .group(loyaltyGroup)
            .elasticY(true)
            // (optional) whether bar should be center to its x value. Not needed for ordinal chart, :default=false
            .centerBar(false)
            // (optional) set gap between bars manually in px, :default=2
            .gap(1)
            // (optional) set filter brush rounding
            .round(dc.round.floor)
            //.alwaysUseRounding(true)
            .xAxisLabel('Visits Number')
            .yAxisLabel('Customer Count')
            .x(d3.scale.linear().domain([1, 10]))
            .renderHorizontalGridLines(true);

           dayOfWeekChart.width(function (){ return $("#duration-chart").width();})
            .height(function (){ return window.innerHeight*.7 < 260 ? window.innerHeight*0.7 : 260;})
            .transitionDuration(350)
            .margins({top: 5, right: 10, bottom: 37, left: 5})
            .group(dayOfWeekGroup)
            .dimension(dayOfWeekDim)
            // assign colors to each value in the x scale domain
            .ordinalColors(['#1f77b4'])
            .label(function (d) {
                return d.key.split(".")[1];
            })
            // title sets the row text
            .title(function (d) {
                return d.value;
            })
            .elasticX(true);

           arrivalHourChart.width(function (){ return $("#duration-chart").width();})
            .height(function (){ return window.innerHeight*.7 < 260 ? window.innerHeight*0.7 : 260;})
            .transitionDuration(350)
            .margins({top: 5, right: 10, bottom: 37, left: 38})
            .dimension(hourOfDayDim)
            .group(hourOfDayGroup)
            .elasticY(true)
            // (optional) whether bar should be center to its x value. Not needed for ordinal chart, :default=false
            .centerBar(false)
            // (optional) set gap between bars manually in px, :default=2
            .gap(1)
            // (optional) set filter brush rounding
            .round(dc.round.floor)
            //.alwaysUseRounding(true)
            .xAxisLabel('Hour of Day')
            .yAxisLabel('Customer Count')
            .x(d3.scale.linear().domain([0, 24]))
            .renderHorizontalGridLines(true);


          departureHourChart.width(function (){ return $("#duration-chart").width();})
            .height(function (){ return window.innerHeight*.7 < 260 ? window.innerHeight*0.7 : 260;})
            .transitionDuration(350)
            .margins({top: 5, right: 10, bottom: 37, left: 38})
            .dimension(departureHourDim)
            .group(departureHourGroup)
            .elasticY(true)
            // (optional) whether bar should be center to its x value. Not needed for ordinal chart, :default=false
            .centerBar(false)
            // (optional) set gap between bars manually in px, :default=2
            .gap(1)
            // (optional) set filter brush rounding
            .round(dc.round.floor)
            //.alwaysUseRounding(true)
            .xAxisLabel('Hour of Day')
            .yAxisLabel('Customer Count')
            .x(d3.scale.linear().domain([0, 24]))
            .renderHorizontalGridLines(true);

        moveChart
            .renderArea(true)
            .width(function (){ return $("#wrap").width();})
            .height(function (){ return window.innerHeight*.6 < 260 ? window.innerHeight*0.6 : 260;})
            .transitionDuration(350)
            .margins({top: 5, right: 35, bottom: 37, left: 40})
            .dimension(moveWeeksDim)
            .mouseZoomable(false)
            // Specify a range chart to link the brush extent of the range with the zoom focue of the current chart.
            .rangeChart(volumeChart)
            .x(d3.time.scale().domain([dataDateStart, dataDateEnd]))
            .round(d3.time.week.round)
            .xUnits(d3.time.weeks)
            .elasticY(true)
            .renderHorizontalGridLines(true)
            .legend(dc.legend().x(800).y(10).itemHeight(13).gap(5))
            // Add the base layer of the stack with group. The second parameter specifies a series name for use in the legend
            // The `.valueAccessor` will be used for the base layer
            .group(indexAvgByWeekGroup, "Returning Clients")
            .valueAccessor(function (d) {
                return d.value.returnClients;
            })
            // stack additional layers with `.stack`. The first paramenter is a new group.
            // The second parameter is the series name. The third is a value accessor.
            .stack(indexAvgByWeekGroup, "New Clients", function (d) {
                return d.value.newClients;
            })
            // title can be called by any stack layer.
            .title(function (d) {
                var value = d.value.newClients ? d.value.newClients : d.returnClients;
                if (isNaN(value)) value = 0;
                return dateFormat(d.key) + "\n" + numberFormat(value);
            });

        volumeChart.width(function (){ return $("#wrap").width();})
            .height(function (){ return window.innerHeight/5 < 100 ? window.innerHeight/5 : 100;})
            .transitionDuration(350)
            .margins({top: 5, right: 35, bottom: 37, left: 40})
            .dimension(moveDaysDim)
            .group(volumeByDayGroup)
            .centerBar(true)
            .gap(1)
            .x(d3.time.scale().domain([dataDateStart, dataDateEnd]))
            .round(d3.time.day.round)
            //.alwaysUseRounding(true)
            .xUnits(d3.time.days)
            .yAxis().ticks(1);


         originChart.width(function (){ return $("#wrap").width();})
            .height(function (){ return window.innerHeight/5 < 100 ? window.innerHeight/5 : 100;})
            .transitionDuration(350)
            .margins({top: 5, right: 35, bottom: 37, left: 40})
            .dimension(originDim)
            .group(originGroup)
            .centerBar(true)
            .gap(1)
            .x(d3.time.scale().domain([dataDateStart, dataDateEnd]))
            .round(d3.time.day.round)
            //.alwaysUseRounding(true)
            .xUnits(d3.time.days)
            .yAxis().ticks(1);

        //~~~~ Rendering  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        dc.renderAll();

    });
